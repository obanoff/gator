// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed_follows.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
INSERT INTO feed_follows (user_id, feed_id)
VALUES (
  (SELECT users.id FROM users WHERE users.name = $1),
  $2
)
RETURNING feed_follows.id, feed_follows.user_id, feed_follows.feed_id, feed_follows.created_at, feed_follows.updated_at, 
  (SELECT users.name FROM users 
  WHERE feed_follows.user_id = users.id ) AS user_name,
  (SELECT feeds.name FROM feeds
  WHERE feed_follows.feed_id = feeds.id) AS feed_name
`

type CreateFeedFollowParams struct {
	Name   string
	FeedID sql.NullInt32
}

type CreateFeedFollowRow struct {
	ID        int32
	UserID    uuid.NullUUID
	FeedID    sql.NullInt32
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.Name, arg.FeedID)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const deleteFeedFollowForUser = `-- name: DeleteFeedFollowForUser :exec
DELETE FROM feed_follows 
WHERE user_id = (
  SELECT users.id FROM users
  WHERE users.name = $1
) AND feed_id = (
  SELECT feeds.id FROM feeds
  WHERE feeds.url = $2
)
`

type DeleteFeedFollowForUserParams struct {
	Name string
	Url  string
}

func (q *Queries) DeleteFeedFollowForUser(ctx context.Context, arg DeleteFeedFollowForUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollowForUser, arg.Name, arg.Url)
	return err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT feed_follows.id, feed_follows.user_id, feed_follows.feed_id, feed_follows.created_at, feed_follows.updated_at, users.name AS user_name, feeds.name AS feed_name
FROM feed_follows
JOIN users ON users.id = feed_follows.user_id
JOIN feeds ON feeds.id = feed_follows.feed_id
WHERE users.name = $1
`

type GetFeedFollowsForUserRow struct {
	ID        int32
	UserID    uuid.NullUUID
	FeedID    sql.NullInt32
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	UserName  string
	FeedName  string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, name string) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
