// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (title, url, description, feed_id, published_at)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (url)
DO UPDATE
SET title = EXCLUDED.title,
  description = EXCLUDED.description,
  feed_id = EXCLUDED.feed_id,
  published_at = EXCLUDED.published_at,
  updated_at = CURRENT_TIMESTAMP
`

type CreatePostParams struct {
	Title       string
	Url         string
	Description string
	FeedID      sql.NullInt32
	PublishedAt sql.NullTime
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.FeedID,
		arg.PublishedAt,
	)
	return err
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT posts.title, posts.description, posts.url, posts.published_at FROM posts
JOIN feed_follows ON feed_follows.feed_id = posts.feed_id
JOIN users ON users.id = feed_follows.user_id
WHERE users.name = $1
ORDER BY posts.published_at DESC
LIMIT $2
`

type GetPostsByUserParams struct {
	Name  string
	Limit int32
}

type GetPostsByUserRow struct {
	Title       string
	Description string
	Url         string
	PublishedAt sql.NullTime
}

func (q *Queries) GetPostsByUser(ctx context.Context, arg GetPostsByUserParams) ([]GetPostsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUser, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserRow
	for rows.Next() {
		var i GetPostsByUserRow
		if err := rows.Scan(
			&i.Title,
			&i.Description,
			&i.Url,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
